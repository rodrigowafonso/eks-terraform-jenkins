pipeline {
    agent any
    environment {
        AWS_ACCESS_KEY_ID = credentials('AWS_ACCESS_KEY_ID')
        AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
        AWS_DEFAULT_REGION = credentials('AWS_REGION')
    }

    parameters {
        choice(name: 'CREATE_OR_DESTROY', choices: ['Create', 'Destroy'], description: 'O que você gostaria de Criar ou Destruir o Cluster Kubernetes? ')
    }

    stages {

        stage('Checkout Código Github SCM') {
            steps {
                script {
                    checkout scmGit(branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/rodrigowafonso/eks-terraform-jenkins.git']])
                }
            }
        }

        stage('Inicializando o Terraform') {
            steps {
                script {
                    dir('terraform') {
                        sh 'terraform init'
                    }
                }
            }
        }

        stage('Terraform Format e Validate') {
            steps {
                script {
                    dir('terraform') {
                        sh 'terraform fmt'
                        sh 'terraform validate'
                    }
                }
            }

        }

        stage('Provisionando a Infraestrutura') {
            steps {
                script {
                    dir('terraform') {
                        sh 'terraform plan'
                    }
                    input(message: "Approve?", ok: "proceed")

                }
            }
            when {
                expression {
                    params.CREATE_OR_DESTROY == 'Create' || params.CREATE_OR_DESTROY == 'Destroy' 
                }
            }
        }

        stage('Create Cluster EKS') {
            steps {
                script {
                    dir('terraform') {
                        sh 'echo Executando o terraform apply'
                        sh 'terraform apply -no-color --auto-approve'
                    }
                }
            }
            when {
                expression {
                    params.CREATE_OR_DESTROY == 'Create'
                }
            }
        }

        stage('Destroy Cluster EKS') {
            steps {
                script {
                    dir('terraform') {
                        sh 'terraform destroy -no-color --auto-approve'
                    }
                }
            }
            when {
                expression {
                    params.CREATE_OR_DESTROY == 'Destroy'
                }
            }
        }

        stage('Coletando o nome de Cluster') {
            steps {
                script {
                    sh 'echo executando a coleta do nome do cluster'
                    def outputs_tf = sh(script: 'terraform output -raw aws_eks_cluster_name', returnStdout: true).trim()
                    def TF_VAR_CLUSTER_NAME = outputs_tf.split('=')[1].replaceAll('"', '').trim()
                    println "Cluster Name: ${TF_VAR_CLUSTER_NAME}"
                }
            }
            when {
                expression {
                    params.CREATE_OR_DESTROY == 'Create'
                }
            }
        }

        stage('Configurando o Kubectl Config') {
            steps {
                script {
                    sh 'echo Configurando o Kubeconfig'
                    sh 'aws eks update-kubeconfig --region "${AWS_DEFAULT_REGION}" --name "$(terraform output -raw aws_eks_cluster_name)"'
                }
            }
            when {
                expression {
                    params.CREATE_OR_DESTROY == 'Create'
                }
            }
        }

        stage('Deploy dos Manifestos no Kubernetes') {
            steps {
                script {
                    sh 'echo Executando os manifestos da aplicação'
                    sh 'kubectl apply -f ./manifests/deployment.yml'
                    sh 'kubectl apply -f ./manifests/service.yml'
                    sh 'kubectl get pods'
                    sh 'kubectl get services'
                }
            }
            when {
                expression {
                    params.CREATE_OR_DESTROY == 'Create'
                }
            }
        }

    }
}